library(tidyverse)
library(data.table)
library(lme4)
library(bbmle)
library(car)
library(gridExtra)
d <- read.csv('../../../data/dstCleanChoice2.csv')
d$selSafeDeck <- ifelse(d$selectedRiskyDeck == 1, 0, 1)
N <- nrow(data.table(d)[,.(count = .N), by = subject])
sMeans <- d %>%
mutate(condition = factor(condition)) %>%
mutate(condition = factor(condition, levels = levels(condition)[c(2,1,4,3)])) %>%
group_by(subject, condition) %>%
summarize(selSafeDeck = mean(selSafeDeck))
condMeans <- sMeans %>%
group_by(condition) %>%
summarize(ssd = mean(selSafeDeck))
sMeans %>%
group_by(condition) %>%
summarize(ssd = mean(selSafeDeck), se = sd(selSafeDeck) / sqrt(N)) %>%
ggplot(aes(x = condition, y = ssd)) +
geom_point(size = 4, shape = 23, fill = 'red', color = 'black') +
geom_jitter(data = sMeans, aes(x = condition, y = selSafeDeck), width = .05, height = 0, alpha = 0.3) +
geom_line(data = sMeans, aes(x = condition, y = selSafeDeck, group = subject), linetype = 'dashed', alpha = 0.3) +
geom_boxplot(data = sMeans, aes(x = condition, y = selSafeDeck), fill = NA) +
geom_label(data = condMeans, mapping = aes(x = condition, y = ssd, label = round(ssd, 2)), hjust = 1.5, vjust = 1.5) +
labs(
x = 'Critical Deck Intensity',
y = 'Proportion Selections of Safe Deck',
caption = 'Red diamonds reflect condition means; Horizontal bars in box plots reflect medians.'
) +
scale_x_discrete(labels = c('Easy Moderate', 'Easy Extreme', 'Hard Moderate', 'Hard Extreme')) +
theme_bw()
summary(d$condition)
condMeans
d %>%
group_by(subject) %>%
summarize(ssd = mean(selSafeDeck)) %>%
ggplot(aes(x = subject, y = ssd)) +
geom_point(shape = 17) +
geom_hline(yintercept = 0.5, linetype = 'dashed') +
coord_flip() +
labs(
x = 'Subject',
y = 'Proportion Selection of Safe Deck'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
condMeans <- d %>%
group_by(subject, difficulty) %>%
summarize(ssd = mean(selSafeDeck)) %>%
group_by(difficulty) %>%
summarize(ssd = mean(ssd))
# uSubjects <- unique(d$subject)
#
# subjectCode <- data.frame(subject = uSubjects)
# subjectCode$subjectLabel <- factor('', levels = c('Supports prospect theory', 'Opposite prospect theory', 'No difference'))
#
# for (i in uSubjects) {
#   t <- d[d$subject == i, c('difficulty', 'selSafeDeck')]
#   mns <- c(e = mean(t[t$difficulty == 'Easier than Reference',]$selSafeDeck), h = mean(t[t$difficulty == 'Harder than Reference',]$selSafeDeck))
#
#
#   if (mns[1] != mns[2]) {
#     m1 <- t.test(t[t$difficulty == 'Easier than Reference',]$selSafeDeck, t[t$difficulty == 'Harder than Reference',]$selSafeDeck, within = TRUE)
#   } else {
#     subjectCode[subjectCode$subject == i,]$subjectLabel <- 'No difference'
#     next
#   }
#
#   if (mns['e'] > mns['h'] & m1$p.value < .05) {
#     subjectCode[subjectCode$subject == i,]$subjectLabel <- 'Supports prospect theory'
#   } else if (mns['e'] < mns['h'] & m1$p.value < .05) {
#     subjectCode[subjectCode$subject == i,]$subjectLabel <- 'Opposite prospect theory'
#   } else {
#     subjectCode[subjectCode$subject == i,]$subjectLabel <- 'No difference'
#   }
# }
#
# d <- subjectCode %>%
#   inner_join(d)
#
# d %>%
#   group_by(subject, subjectLabel) %>%
#   summarize(count = n()) %>%
#   group_by(subjectLabel) %>%
#   summarize(count = n())
d %>%
group_by(subject, difficulty) %>%
summarize(ssd = mean(selSafeDeck)) %>%
ggplot(aes(x = difficulty, y = ssd)) +
geom_violin(fill = NA, alpha = 0.2) +
geom_boxplot(fill = NA, alpha = 0.3) +
geom_jitter(alpha = 0.4, width = .05, height = 0) +
geom_line(aes(group = subject), linetype = 'dashed', alpha = .3) +
geom_point(data = condMeans, aes(x = difficulty, y = ssd), size = 4, shape = 23, color = 'black', fill = 'red') +
geom_hline(yintercept = 0.5, linetype = 'dotted') +
geom_label(data = condMeans, aes(x = difficulty, y = ssd, label = round(ssd, 2)), hjust = 1.5, vjust = 1.5) +
scale_color_manual(name = 'Subject Label', values = c(`Supports prospect theory` = 'dark green', `Opposite prospect theory` = 'red', `No difference` = 'black')) +
ylim(0,1) +
theme_bw() +
labs(
title = 'Selection of safe deck by difficulty and subject',
x = 'Difficulty',
y = 'Proportion Selection of Safe Deck',
caption = 'Red diamond reflects condition means. Horizontal, black, solid lines reflect medians.'
) +
theme(legend.position = 'bottom')
d$differenceE <- ifelse(d$difference == 'Moderate', -0.5, 0.5)
d$difficultyE <- ifelse(d$difficulty == 'Easier than Reference', -0.5, 0.5)
m1_maximal <- glmer(selSafeDeck ~ differenceE * difficultyE + (1 + difficultyE * differenceE | subject), data = d, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
summary(m1_maximal)
m1_mainEffects <- glmer(selSafeDeck ~ differenceE * difficultyE + (1 + difficultyE + differenceE | subject), data = d, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
AICtab(m1_maximal, m1_mainEffects, nobs = nrow(d))
anova(m1_mainEffects, m1_maximal)
m1_noCov <- glmer(selSafeDeck ~ differenceE * difficultyE + (1| subject) + (0 + difficultyE | subject) + (0 + differenceE | subject) , data = d, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
AICtab(m1_noCov, m1_mainEffects, nobs = nrow(d))
anova(m1_noCov, m1_mainEffects)
m1_noDiff <- glmer(selSafeDeck ~ differenceE * difficultyE + (1| subject) + (0 + differenceE) , data = d, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
AICtab(m1_noCov, m1_noDiff, nobs = nrow(d))
anova(m1_noCov, m1_noDiff)
m1_intercept <- glmer(selSafeDeck ~ differenceE * difficultyE + (1 | subject), data = d, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
agqfun <- function(i) {
f <- update(m1_intercept, nAGQ = i)
c(fixef(f), sqrt(unlist(VarCorr(f))))
}
agqvec <- 1:25
agqres <- sapply(agqvec, agqfun)
t <- data.frame(agqres)
tarNames <- c('Intercept', 'Difference', 'Difficulty', 'Interaction', 'RandomIntercept')
colnames(t) <- 1:25
t %>%
mutate(term = tarNames) %>%
gather(agq, estimate, `1`:`25`) %>%
ggplot(aes(x = as.numeric(agq), y = estimate, group = 1)) +
geom_line() +
facet_wrap(~term, scales = 'free') +
labs(
x = 'Number of adaptive Gauss-Hermite quadrature points',
y = 'Estimate'
) +
theme_bw() +
theme(strip.background = element_rect(color = 'black', fill = 'white'))
m1 <- m1_noCov
p1 <- plot(m1, id = 0.05, id_labels = ~.obs)
p1
d$resid <- resid(m1)
d$difference <- factor(d$difference, levels = levels(d$difference)[c(2,1)])
ggplot(d, aes(x = difficulty, y = resid, fill= difference)) +
geom_boxplot() +
labs(
x = 'Difficulty',
y = 'Residuals'
) +
scale_fill_manual(name = 'Difference', values = c(Extreme = 'dark grey', Moderate = 'white')) +
coord_flip() +
theme_bw() +
theme(legend.position = c(.1, .5),
axis.text.y = element_text(angle = 90, hjust = .5))
rans <- data.frame(ranef(m1, condVar = TRUE))
p1 <- rans %>%
filter(term == '(Intercept)') %>%
ggplot(aes(x = reorder(grp, condval), y = condval)) +
geom_point() +
geom_errorbar(aes(ymin = condval - condsd, ymax = condval + condsd), width = 0) +
coord_flip() +
labs(
x = '',
y = 'Intercept'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())
p2 <- rans %>%
filter(term == 'difficultyE') %>%
ggplot(aes(x = reorder(grp, condval), y = condval)) +
geom_point() +
geom_errorbar(aes(ymin = condval - condsd, ymax = condval + condsd), width = 0) +
coord_flip() +
labs(
x = '',
y = 'Difficulty Slope'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())
p3 <- rans %>%
filter(term == 'differenceE') %>%
ggplot(aes(x = reorder(grp, condval), y = condval)) +
geom_point() +
geom_errorbar(aes(ymin = condval - condsd, ymax = condval + condsd), width = 0) +
coord_flip() +
labs(
x = '',
y = 'Difference Slope'
) +
theme_bw() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())
grid.arrange(p1, p2, p3, nrow = 1)
m1_CI_prof <- confint(m1)
m1_CI_quad <- confint(m1, method = 'Wald')
m1_CI_boot <- confint(m1, method = 'boot')
CIs <- data.frame(m1_CI_prof)
CIs$factor <- row.names(CIs)
CIs$method <- 'prof'
t1 <- data.frame(m1_CI_quad)
t1$factor <- row.names(t1)
t1$method <- 'Wald'
t2 <- data.frame(m1_CI_boot)
t2$factor <- row.names(t2)
t2$method <- 'boot'
CIs <- rbind(CIs, t1, t2)
CIs <- CIs %>%
filter(!grepl('.sig', factor))
colnames(CIs)[1:2] <- c('lower', 'upper')
save(CIs, file = 'CIs.RData')
load('CIs.RData')
fe <- data.frame(estimate = fixef(m1), factor = names(fixef(m1)))
CIs <- fe %>%
inner_join(CIs)
CIs$factor <- factor(CIs$factor)
CIs$factor <- factor(CIs$factor, levels = levels(CIs$factor)[c(3,2,4,1)])
temp <- CIs[CIs$factor == 'difficultyE' & CIs$method == 'boot',]
difficultyPrint <- data.frame(parameter = c('Difficulty Slope', 'CI Upper', 'CI Lower'), value = c(exp(temp$estimate), exp(temp$upper), exp(temp$lower)))
difficultyPrint
CIs %>%
ggplot(aes(x = factor, y = estimate)) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = method), position = position_dodge(width = .5), width = 0) +
geom_point(aes(color = method), position = position_dodge(width = .5)) +
coord_flip()+
scale_x_discrete(labels = c(`(Intercept)` = 'Intercept', `difficultyE` = 'Difficulty', `differenceE` = 'Difference', `differenceE:difficultyE` = 'Interaction')) +
labs(
y = 'Effect (log odds of choosing safe deck)',
x = '',
caption = 'Lines represent 95% confidence intervals according to Method'
) +
scale_color_discrete(name = 'Method') +
theme_bw() +
theme(legend.position = c(.9, .5))
coef(summary(m1))
m1_noDifference <- update(m1, .~.-differenceE)
anova(m1, m1_noDifference)
m1_noDifficulty <- update(m1, .~.-difficultyE)
anova(m1, m1_noDifficulty)
m1_noInt <- glmer(selSafeDeck ~ differenceE + difficultyE + (1 | subject) + (0 + difficultyE | subject) + (0 + differenceE | subject), data = d, family = binomial, control = glmerControl(optimizer = 'bobyqa'))
anova(m1, m1_noInt)
PBsimfun <- function(m0,m1,x=NULL) {
if (is.null(x)) x <- simulate(m0)
m0r <- try(refit(m0,x[[1]]),silent=TRUE)
if (inherits(m0r,"try-error")) return(NA)
m1r <- try(refit(m1,x[[1]]),silent=TRUE)
if (inherits(m1r,"try-error")) return(NA)
c(-2*(logLik(m0r)-logLik(m1r)))
}
set.seed(101)
PBrefdist <- replicate(400, PBsimfun(m1_noDifficulty, m1))
save(PBrefdist, file = 'PBrefdist.RData')
load('PBrefdist.RData')
difficulty <- data.frame(refDist = PBrefdist, principle = dchisq(PBrefdist, 1))
difficulty$refDistDensity <- difficulty$refDist / (sum(difficulty$refDist))
difficulty %>%
ggplot() +
#geom_density(aes(x = density), color = 'red') +
geom_histogram(aes(x = refDist, y = ..density..), bins = 20, fill = 'light grey', color = 'black') +
labs(
x = 'Reference Distribution',
y = 'Density'
) +
theme_bw()
#  geom_density(aes(x = density),fill = NA, color = 'red')
obs <- -2 * (logLik(m1_noDifficulty) - logLik(m1))
pval <- mean(PBrefdist >= obs)
paste('Difficulty:', mean(PBrefdist >= obs))
cued <- read.csv('../../../data/pracCuedClean.csv')
d <- cued %>%
filter(transition != 'startBlock') %>%
group_by(subject, transition) %>%
summarize(rt = mean(rt)) %>%
spread(transition, rt) %>%
mutate(switchCost = `switch` - `repeat`) %>%
select(subject, switchCost) %>%
inner_join(d, by = 'subject')
head(d)
d$switchCostC <- scale(d$switchCost, center = TRUE)
m3 <- glmer(selSafeDeck ~ differenceE * difficultyE * switchCostC + (1 | subject) + (0 + differenceE | subject) + (0 + difficultyE | subject), data = d, family = binomial,  control = glmerControl(optimizer = 'bobyqa'))
summary(m3)
paste('Odds ratios: ', exp(fixef(m3)))
m3_noSwitch <- update(m3, .~.-switchCostC:difficultyE)
anova(m3, m3_noSwitch)
d$switchCostC_h <- d$switchCostC - 1
m3_highSwitch <- glmer(selSafeDeck ~ differenceE * difficultyE * switchCostC_h + (1 | subject) + (0 + differenceE | subject) + (0 + difficultyE | subject), data = d, family = binomial,  control = glmerControl(optimizer = 'bobyqa'))
summary(m3_highSwitch)
paste('Odds ratios: ', exp(fixef(m3_highSwitch)))
m3_noDifficulty <- update(m3_highSwitch, .~.-difficultyE)
anova(m3, m3_noDifficulty)
d$switchCostC_l <- d$switchCostC + 1
m3_lowSwitch <- glmer(selSafeDeck ~ differenceE * difficultyE * switchCostC_l + (1 | subject) + (0 + differenceE | subject) + (0 + difficultyE | subject), data = d, family = binomial,  control = glmerControl(optimizer = 'bobyqa'))
summary(m3_lowSwitch)
paste('Odds ratios: ', exp(fixef(m3_lowSwitch)))
m3_noDifficulty <- update(m3_lowSwitch, .~.-difficultyE)
anova(m3, m3_noDifficulty)
d$difficultyEasy <- d$difficultyE + 0.5
m3_difficultyEasy <- glmer(selSafeDeck ~ differenceE * difficultyEasy * switchCostC + (1 | subject) + (0 + difference | subject) + (0 + difficultyEasy | subject), data = d, family = binomial,  control = glmerControl(optimizer = 'bobyqa'))
summary(m3_difficultyEasy)
paste('Odds ratios: ', exp(fixef(m3_difficultyEasy)))
m3_noSwitch <- update(m3_difficultyEasy, .~.-switchCostC)
anova(m3_difficultyEasy, m3_noSwitch)
d$difficultyHard <- d$difficultyE - 0.5
m3_difficultyHard <- glmer(selSafeDeck ~ differenceE * difficultyHard * switchCostC + (1 | subject) + (0 + difference | subject) + (0 + difficultyHard | subject), data = d, family = binomial,  control = glmerControl(optimizer = 'bobyqa'))
summary(m3_difficultyHard)
paste('Odds ratios: ', exp(fixef(m3_difficultyHard)))
m3_noSwitch <- update(m3_difficultyHard, .~.-switchCostC)
anova(m3_difficultyHard, m3_noSwitch)
### bolker's compute CI function
easyPredCI <- function(model,newdata=NULL,alpha=0.05) {
## baseline prediction, on the linear predictor (logit) scale:
pred0 <- predict(model,re.form=NA,newdata=newdata)
## fixed-effects model matrix for new data
X <- model.matrix(formula(model,fixed.only=TRUE)[-2],newdata)
beta <- fixef(model) ## fixed-effects coefficients
V <- vcov(model)     ## variance-covariance matrix of beta
pred.se <- sqrt(diag(X %*% V %*% t(X))) ## std errors of predictions
## inverse-link function
linkinv <- family(model)$linkinv
## construct 95% Normal CIs on the link scale and
##  transform back to the response (probability) scale:
crit <- -qnorm(alpha/2)
linkinv(cbind(conf.low=pred0-crit*pred.se,
conf.high=pred0+crit*pred.se))
}
newdata <- expand.grid(difficultyE = c(-0.5,0.5), switchCostC = seq(-2,2,by = .01), differenceE = c(-0.5,0.5))
intercept <- fixef(m3)['(Intercept)']
difficultyB <- fixef(m3)['difficultyE']
switchCostB <- fixef(m3)['switchCostC']
interaction <- fixef(m3)['difficultyE:switchCostC']
newdata$proba <- predict(m3, newdata = newdata, allow.new.levels = TRUE, type = 'response', re.form = NA)
newdata <- cbind(newdata, easyPredCI(m3, newdata))
newdata$probb <- with(newdata, intercept + difficultyE * difficultyB + switchCostC * switchCostB + difficultyE * switchCostB * interaction)
newdata$probb <- exp(newdata$probb) / (1 + exp(newdata$probb))
sData <- d %>%
group_by(subject, difficultyE) %>%
summarize(selSafeDeck = mean(selSafeDeck), switchCost = mean(switchCost)) %>%
mutate(difficultyE = factor(difficultyE))
sData$sc <- scale(sData$switchCost, center = TRUE)[,1]
newdata %>%
group_by(difficultyE, switchCostC) %>%
summarize(proba = mean(proba), conf.low = mean(conf.low), conf.high = mean(conf.high)) %>%
ggplot(aes(x = switchCostC, y = proba, group = factor(difficultyE))) +
geom_hline(yintercept = 0.5, linetype = 'dashed') +
geom_point(data = sData, aes(x = sc, y = selSafeDeck, color = difficultyE), alpha = .4) +
geom_line(aes(color = factor(difficultyE)), size = 2) +
geom_ribbon(aes(fill = factor(difficultyE), ymin = conf.low, ymax = conf.high), alpha = 0.2) +
ylim(0,1) +
labs(
x = 'Individual Switch Cost (Z-Score)',
y = 'Estimated Probability of Choosing Safe Deck',
caption = 'Dashed line represents selecting at chance'
) +
scale_color_manual(name = 'Difficulty', labels = c(`-0.5` = 'Easier than Reference', `0.5` = 'Harder than Reference'), values = c(`-0.5` = 'Green', `0.5` = 'Red')) +
scale_fill_manual(name = 'Difficulty', labels = c(`-0.5` = 'Easier than Reference', `0.5` = 'Harder than Reference'), values = c(`-0.5` = 'Green', `0.5` = 'Red')) +
theme_bw() +
theme(legend.position = 'bottom')
fixef(m3)
row.names(fixef(m3))
names(fixef(m3))
data.frame(factor = names(fixef(m3)), odds.ratio = exp(fixef(m3)))
data.frame(factor = names(fixef(m3)), odds.ratio = exp(fixef(m3)), row.names = 1:(length(fixef(m3))))
q()
